<?xml version="1.0" encoding="UTF-8"?>
<!-- vi: ft=ant:tw=80:sw=4:ts=4:et
-->
<!--
  Copyright (C) 2013 Jan Christoph Ebersbach <jceb@e-jc.de>

  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.
-->
<project name="docbook" default="default">
    <!-- ant contrib tasks -->
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
      <classpath>
        <pathelement location="lib/ant-contrib/ant-contrib-1.0b3.jar"/>
      </classpath>
    </taskdef>

    <!-- ########## -->
    <!-- Properties -->
    <!-- ########## -->
    <condition property="os" value="windows">
        <os family="windows" />
    </condition>
    <condition property="os" value="unix">
        <os family="unix" />
    </condition>
    <condition property="os" value="mac">
        <os family="mac" />
    </condition>

    <!-- Platform specific properties take precedence over the general properties -->
    <property file="build.properties.${os}" />

    <!-- General properties -->
    <property file="build.properties" />

    <!-- ##### -->
    <!-- Tasks -->
    <!-- ##### -->

    <!-- none -->

    <!-- Filename of main file without suffix -->
    <basename property='file.docbook.name' file='${file}' suffix='${file.suffix}' />

    <xmlcatalog id="allcatalogs">
        <catalogpath>
            <pathelement location="${docbookxsl.dir}/catalog.xml" />
        </catalogpath>
    </xmlcatalog>

    <!-- ############## -->
    <!-- Public Targets -->
    <!-- ############## -->
    <target name="default" description="Execute target depending on output format: ${output.format}">
        <antcall target='${output.format}' />
    </target>

    <target name="help" description="Print help information">
        <java classname="org.apache.tools.ant.Main">
            <arg value="-projecthelp" />
            <arg value="-buildfile" />
            <arg value="${ant.file}" />
        </java>
    </target>

    <target name="test" depends="test-nochunk,test-chunk" description="Run tests">
    </target>

    <target name="test-nochunk" depends="pdf,xhtml">
    </target>

    <target name="test-chunk" depends="epub,epub3,xhtmlchunk,xhtml5,xhtml5chunk">
    </target>

    <target name="clean" description="Cleanup output directory">
        <!-- delete output directory -->
        <delete dir="${output.dir}" />
    </target>

    <target name="cleanepub">
        <delete dir="${output.dir}/META-INF/" />
        <delete dir="${output.dir}/OEBPS/" />
    </target>

    <target name="validate" depends="todocbook" unless='novalidation' description="Validate resulting DocBook file (happens implicitly)">
        <!-- validate DocBook file -->
        <java jar="${validate.jar}" fork='true' failonerror='true'>
            <jvmarg value='${validate.jvmarg}' />
            <arg value='${docbook.rng}' />
            <arg value='${file.docbook}' />
        </java>
    </target>

    <target name="pdf" depends='fo' description="Convert document to PDF">
        <if>
            <and>
                <isset property="fop.config" />
                <length string="${fop.config}" when="greater" length="0" trim="true" />
            </and>
            <then>
                <exec executable="${fop.exe}">
                    <env key="FOP_HYPHENATION_PATH" value="${hyphenation.jar}" />
                    <arg line="--noconfig" />
                    <arg line="-c" />
                    <arg line="${fop.config}" />
                    <arg line="${output.dir}/${file.docbook.name}.fo" />
                    <arg line="${output.dir}/${file.docbook.name}.pdf" />
                </exec>
            </then>
            <else>
                <then>
                    <exec executable="${fop.exe}">
                        <env key="FOP_HYPHENATION_PATH" value="${hyphenation.jar}" />
                        <arg line="--noconfig" />
                        <arg line="${output.dir}/${file.docbook.name}.fo" />
                        <arg line="${output.dir}/${file.docbook.name}.pdf" />
                    </exec>
                </then>
            </else>
        </if>
    </target>

    <target name="epub" depends='epub2' description="Convert document to EPUB2" />

    <target name="epub2" depends='cleanepub,todocbook,validate' description="Convert document to EPUB2">
        <antcall target="convert">
            <param name="stylesheet" value="${epub.stylesheet}"/>
            <param name="file.output" value="${output.dir}/${file.docbook.name}.epub"/>
        </antcall>
        <!--create mimetype file-->
        <echo message="application/epub+zip" file="${output.dir}/mimetype"/>
        <!--build epub file-->
        <zip destfile="${output.dir}/${file.docbook.name}.epub" compress="false">
            <fileset dir="${output.dir}" includes="mimetype" />
            <fileset dir="${output.dir}" includes="META-INF/**"/>
            <fileset dir="${output.dir}" includes="OEBPS/**"/>
        </zip>
        <!--currently, updating the epub file using the below statement corrupts
        the epub file.  As long as this doesn't work, compression for epub is
        not supported .. :-/ -->
        <!--<zip destfile="${output.dir}/${file.docbook.name}.epub" update="true" level="9" keepcompression="true">-->
            <!--<fileset dir="${output.dir}" includes="META-INF/**"/>-->
            <!--<fileset dir="${output.dir}" includes="OEBPS/**"/>-->
        <!--</zip>-->
    </target>

    <target name="epub3" depends='cleanepub,todocbook,validate' description="Convert document to EPUB3">
        <antcall target="convert">
            <param name="stylesheet" value="${epub3.stylesheet}"/>
            <param name="dest.dir" value="${output.dir}/OEBPS/"/>
        </antcall>
        <!--build epub file-->
        <zip destfile="${output.dir}/${file.docbook.name}.epub" compress="false">
            <fileset dir="${output.dir}" includes="mimetype" />
            <fileset dir="${output.dir}" includes="META-INF/**"/>
            <fileset dir="${output.dir}" includes="OEBPS/**"/>
        </zip>
        <!--currently, updating the epub file using the below statement corrupts
        the epub file.  As long as this doesn't work, compression for epub is
        not supported .. :-/ -->
        <!--<zip destfile="${output.dir}/${file.docbook.name}.epub" update="true" level="9" keepcompression="true">-->
            <!--<fileset dir="${output.dir}" includes="META-INF/**"/>-->
            <!--<fileset dir="${output.dir}" includes="OEBPS/**"/>-->
        <!--</zip>-->
    </target>

    <target name="man" depends='todocbook,validate' description="Convert document to manpage">
        <antcall target="convert">
            <param name="stylesheet" value="${manpage.stylesheet}"/>
            <param name="file.output" value="${output.dir}/${file.docbook.name}.X"/>
        </antcall>
    </target>

    <target name="html" depends='todocbook,validate' description="Convert document to HMTL">
        <antcall target="convert">
            <param name="stylesheet" value="${html.stylesheet}"/>
            <param name="file.output" value="${output.dir}/${file.docbook.name}.html"/>
        </antcall>
    </target>

    <target name="xhtml" depends='todocbook,validate' description="Convert document to XHMTL">
        <antcall target="convert">
            <param name="stylesheet" value="${xhtml.stylesheet}"/>
            <param name="file.output" value="${output.dir}/${file.docbook.name}.html"/>
        </antcall>
    </target>

    <target name="xhtmlchunk" depends='todocbook,validate' description="Convert document to XHMTL chunked output">
        <antcall target="convert">
            <param name="stylesheet" value="${xhtmlchunk.stylesheet}"/>
            <param name="dest.dir" value="${output.dir}/"/>
        </antcall>
    </target>

    <target name="xhtml5" depends='todocbook,validate' description="Convert document to XHMTL5">
        <antcall target="convert">
            <param name="stylesheet" value="${xhtml5.stylesheet}"/>
            <param name="file.output" value="${output.dir}/${file.docbook.name}.xhtml"/>
        </antcall>
    </target>

    <target name="xhtml5chunk" depends='todocbook,validate' description="Convert document to XHMTL5 chunked output">
        <antcall target="convert">
            <param name="stylesheet" value="${xhtml5chunk.stylesheet}"/>
            <param name="dest.dir" value="${output.dir}/"/>
        </antcall>
    </target>

    <target name="fo" depends='todocbook,validate'>
        <!-- Convert document to fo -->
        <antcall target="convert">
            <param name="stylesheet" value="${fo.stylesheet}"/>
            <param name="file.output" value="${output.dir}/${file.docbook.name}.fo"/>
        </antcall>
    </target>


    <!-- ########################################## -->
    <!-- Private Targets (don't call them directly) -->
    <!-- ########################################## -->
    <target name="output">
        <!-- Create output directory structure -->
        <mkdir dir='${output.dir}' />
    </target>

    <target name="convert">
        <!-- Convert DocBook document into a new format
             Parmeters:
        file.docbook # the DocBook file/document to convert
        file.output # full path to the output file
        dest.dir # if specified, file.output is ignored - this is useful
                 # for any chunked output formats like XHTML chunked, epub, aso.
        stylesheet # the stylesheet used to convert the document
        -->
        <if>
            <and>
                <isset property="xsltproc.exe" />
                <length string="${xsltproc.exe}" when="greater" length="0" trim="true" />
            </and>
            <then>
                <if>
                    <isset property="dest.dir" />
                    <then>
                        <!-- epub3 workaround - it needs a directory and no output filename! -->
                        <exec executable="${xsltproc.exe}">
                            <arg line="--xinclude" />
                            <arg line="--stringparam" />
                            <arg line="base.dir" />
                            <arg line="${dest.dir}" />
                            <arg line="${stylesheet}" />
                            <arg line="${file.docbook}" />
                        </exec>
                    </then>
                    <else>
                        <exec executable="${xsltproc.exe}">
                            <arg line="--xinclude" />
                            <arg line="--output" />
                            <arg line="${file.output}" />
                            <arg line="${stylesheet}" />
                            <arg line="${file.docbook}" />
                        </exec>
                    </else>
                </if>
            </then>
            <elseif>
                <and>
                    <isset property="xslt.jar" />
                    <length string="${xslt.jar}" when="greater" length="0" trim="true" />
                </and>
                <then>
                    <if>
                        <isset property="dest.dir" />
                        <then>
                            <!-- epub3 workaround - it needs a directory and no output filename! -->
                            <xslt includes="${file.docbook}" destdir="${dest.dir}"
                                style="${stylesheet}" force="true">
                                <classpath path="${xslt.jar}" />
                                <param name="base.dir" expression="${dest.dir}" />
                            </xslt>
                        </then>
                        <else>
                            <xslt in="${file.docbook}" out="${file.output}"
                                style="${stylesheet}" force="true">
                                <classpath path="${xslt.jar}" />
                            </xslt>
                        </else>
                    </if>
                </then>
            </elseif>
            <else>
                <fail message="Neither xsltproc.exe nor xslt.jar were specified." />
            </else>
        </if>
    </target>

    <!-- ################# -->
    <!-- Format conversion -->
    <!-- ################# -->
    <target name="todocbook" depends="output">
        <!-- Transforms different file formats to docbook so that they can be
             processed later on.  Feel free to add more transformations here -->
        <if>
            <!-- insert other formats here -->
            <equals arg1="${file.format}" arg2="asciidoc" />
            <then>
                <antcallback target="convert_asciidoc" return="file.docbook" />
            </then>
            <else>
                <antcallback target="convert_docbook" return="file.docbook" />
            </else>
        </if>
    </target>

    <target name="convert_asciidoc">
        <property name="file.docbook" value="${output.dir}/${file.docbook.name}.xml" />
        <exec executable="${asciidoc.exe}">
            <arg value="--backend=docbook" />
            <arg value="--out-file=${file.docbook}" />
            <arg value="${file}" />
        </exec>
    </target>

    <target name="convert_docbook">
        <property name="file.docbook" value="${file}" />
    </target>
</project>
